// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
     
    Not16 (in = false, out = NotZero);
    Not16 (in = x, out = NotX);
    Not16 (in = y, out = NotY);

    Mux4Way16 (a = x, b = false, c = NotX, d = NotZero, sel[0] = zx, sel[1] = nx, out = X);
    Mux4Way16 (a = y, b = false, c = NotY, d = NotZero, sel[0] = zy, sel[1] = ny, out = Y);

    And16 (a = X, b = Y, out = AndXY);
    Add16 (a = X, b = Y, out = AddXY);

    Mux16 (a = AndXY, b = AddXY, sel = f, out = Out);
    Not16 (in = Out, out = NotOUT);
    Mux16 (a = Out, b = NotOUT, sel = no, out = out1);

    Not16 (in = out1, out = not);
    Not16 (in = not, out[0..7] = A, out[8..15] = B, out[15] = ng);
 
    Or8Way (in = A, out = a);
    Or8Way (in = B, out = b);
    Or (a = a, b = b, out = AB);
    Not (in = AB, out = zr);
   
    Not16 (in[0..7] = A, in[8..15] = B, out = notOut);
    Not16 (in = notOut, out = out);

}
